@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div id="notification-container">
    <!-- Dynamic notifications will be added here by JavaScript -->
</div>

<!-- Toast Template (hidden) -->
<div id="notification-template" style="display: none;">
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <div class="notification-icon me-2">
                <i class="bi bi-bell-fill"></i>
            </div>
            <strong class="me-auto notification-title">اعلان</strong>
            <small class="notification-time">همین الان</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body notification-body">
            <!-- Message content -->
        </div>
    </div>
</div>

<!-- Sound for notifications -->
<audio id="notification-sound" preload="auto" style="display: none;">
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IAAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQAoUYbXr66hVFApGn+DyvmMcBjeS2fPNeSsFJHfH8N2QQA" type="audio/wav">
</audio>

@code {
    private IJSObjectReference? notificationModule;
    private bool disposed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            try
            {
                // Initialize notification system
                await JSRuntime.InvokeVoidAsync("eval", @"
                    window.notificationSystem = {
                        show: function(title, message, type) {
                            const container = document.getElementById('notification-container');
                            if (!container) return;

                            const notificationId = 'notification-' + Date.now();
                            const notificationHtml = `
                                <div id='${notificationId}' class='toast' role='alert' aria-live='assertive' aria-atomic='true'>
                                    <div class='toast-header'>
                                        <i class='bi bi-bell-fill text-primary me-2'></i>
                                        <strong class='me-auto'>${title}</strong>
                                        <small>همین الان</small>
                                        <button type='button' class='btn-close' data-bs-dismiss='toast'></button>
                                    </div>
                                    <div class='toast-body'>${message}</div>
                                </div>
                            `;

                            container.insertAdjacentHTML('beforeend', notificationHtml);

                            const toastElement = document.getElementById(notificationId);
                            const toast = new bootstrap.Toast(toastElement, {
                                autohide: true,
                                delay: 5000
                            });

                            toast.show();

                            // Auto remove from DOM after hiding
                            toastElement.addEventListener('hidden.bs.toast', () => {
                                toastElement.remove();
                            });

                            // Play notification sound
                            this.playSound();
                        },

                        playSound: function() {
                            try {
                                const audio = document.getElementById('notification-sound');
                                if (audio) {
                                    audio.currentTime = 0;
                                    audio.play().catch(e => console.log('Could not play notification sound'));
                                }
                            } catch (e) {
                                console.log('Notification sound error:', e);
                            }
                        }
                    };
                ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing notifications: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!disposed)
        {
            disposed = true;

            try
            {
                if (notificationModule != null)
                {
                    await notificationModule.DisposeAsync();
                }

                // Clean up notification system
                await JSRuntime.InvokeVoidAsync("eval", "delete window.notificationSystem;");
            }
            catch (Exception ex)
            {
                // Log error but don't throw during disposal
                Console.WriteLine($"Error disposing notifications: {ex.Message}");
            }
        }
    }
}