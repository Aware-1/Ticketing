@page "/logout"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="text-center">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">در حال خروج...</span>
        </div>
        <p class="mt-3 fs-5">در حال خروج از سیستم...</p>
        <small class="text-muted">لطفاً صبر کنید...</small>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Wait a moment for UI to show
            await Task.Delay(1000);

            // Clear client-side storage
            await JSRuntime.InvokeVoidAsync("localStorage.clear");
            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");

            // Create HttpContext for sign out
            var httpContext = new DefaultHttpContext();
            await httpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);

            // Clear any cookies
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                    document.cookie.split(';').forEach(function(c) {
                        document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');
                    });
                ");
            }
            catch
            {
                // Ignore cookie clearing errors
            }

            // Redirect to login
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            // Force navigation even if there's an error
            Navigation.NavigateTo("/login", true);
        }
    }
}